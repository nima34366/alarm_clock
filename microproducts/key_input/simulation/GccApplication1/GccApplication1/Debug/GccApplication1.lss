
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000301  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 30 01 	call	0x260	; 0x260 <main>
  88:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <keypd>:
	return 0;
}

void keypd()
{
	DDRB = 0b11111111;; /* for light pins set to output */
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b10000000;;
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	8a b9       	out	0x0a, r24	; 10
	
	DDRC = 0b00111111;   /* pc0,pc1,pc2 set as output */
  98:	2f e3       	ldi	r18, 0x3F	; 63
  9a:	27 b9       	out	0x07, r18	; 7
	PORTC = 0b00111000;   /* pc0-pc2 outputs turn on (HIGH)*/
  9c:	88 e3       	ldi	r24, 0x38	; 56
  9e:	88 b9       	out	0x08, r24	; 8
	
	key2 = PINC & 0b00000111 ;
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	87 70       	andi	r24, 0x07	; 7
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <key2+0x1>
  aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <key2>
	
	DDRC = 0b00111111;    /* pc0,pc1,pc2 set as output */
  ae:	27 b9       	out	0x07, r18	; 7
	PORTC = 0b00000111;   /* pc0-pc2 outputs turn on (HIGH)*/
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	88 b9       	out	0x08, r24	; 8
	
	key1 = PINC & 0b00111000 ;
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	88 73       	andi	r24, 0x38	; 56
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if ((key1 == 0b00001000) & (key2 == 0b00000100)){PORTB = 0b10000000; }
  c2:	31 e0       	ldi	r19, 0x01	; 1
  c4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <key2>
  c8:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <key2+0x1>
  cc:	44 30       	cpi	r20, 0x04	; 4
  ce:	51 05       	cpc	r21, r1
  d0:	09 f0       	breq	.+2      	; 0xd4 <keypd+0x44>
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	08 97       	sbiw	r24, 0x08	; 8
  d8:	09 f0       	breq	.+2      	; 0xdc <keypd+0x4c>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	23 23       	and	r18, r19
  de:	11 f0       	breq	.+4      	; 0xe4 <keypd+0x54>
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00010000) & (key2 == 0b00000100)){PORTB = 0b11000000; }
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	20 31       	cpi	r18, 0x10	; 16
  f0:	31 05       	cpc	r19, r1
  f2:	09 f0       	breq	.+2      	; 0xf6 <keypd+0x66>
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
  fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 100:	24 30       	cpi	r18, 0x04	; 4
 102:	31 05       	cpc	r19, r1
 104:	09 f0       	breq	.+2      	; 0x108 <keypd+0x78>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	89 23       	and	r24, r25
 10a:	11 f0       	breq	.+4      	; 0x110 <keypd+0x80>
 10c:	80 ec       	ldi	r24, 0xC0	; 192
 10e:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00100000) & (key2 == 0b00000100)){PORTB = 0b11100000; }
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	20 32       	cpi	r18, 0x20	; 32
 11c:	31 05       	cpc	r19, r1
 11e:	09 f0       	breq	.+2      	; 0x122 <keypd+0x92>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 128:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 12c:	24 30       	cpi	r18, 0x04	; 4
 12e:	31 05       	cpc	r19, r1
 130:	09 f0       	breq	.+2      	; 0x134 <keypd+0xa4>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	89 23       	and	r24, r25
 136:	11 f0       	breq	.+4      	; 0x13c <keypd+0xac>
 138:	80 ee       	ldi	r24, 0xE0	; 224
 13a:	85 b9       	out	0x05, r24	; 5
	
	if ((key1 == 0b00001000) & (key2 == 0b00000010)){PORTB = 0b11110000; }
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 146:	28 30       	cpi	r18, 0x08	; 8
 148:	31 05       	cpc	r19, r1
 14a:	09 f0       	breq	.+2      	; 0x14e <keypd+0xbe>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 154:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 158:	22 30       	cpi	r18, 0x02	; 2
 15a:	31 05       	cpc	r19, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <keypd+0xd0>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	89 23       	and	r24, r25
 162:	11 f0       	breq	.+4      	; 0x168 <keypd+0xd8>
 164:	80 ef       	ldi	r24, 0xF0	; 240
 166:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00010000) & (key2 == 0b00000010)){PORTB = 0b11111000; }
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	20 31       	cpi	r18, 0x10	; 16
 174:	31 05       	cpc	r19, r1
 176:	09 f0       	breq	.+2      	; 0x17a <keypd+0xea>
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 180:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 184:	22 30       	cpi	r18, 0x02	; 2
 186:	31 05       	cpc	r19, r1
 188:	09 f0       	breq	.+2      	; 0x18c <keypd+0xfc>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	89 23       	and	r24, r25
 18e:	11 f0       	breq	.+4      	; 0x194 <keypd+0x104>
 190:	88 ef       	ldi	r24, 0xF8	; 248
 192:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00100000) & (key2 == 0b00000010)){PORTB = 0b11111100; }
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	31 05       	cpc	r19, r1
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <keypd+0x116>
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1ac:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <keypd+0x128>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	89 23       	and	r24, r25
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <keypd+0x130>
 1bc:	8c ef       	ldi	r24, 0xFC	; 252
 1be:	85 b9       	out	0x05, r24	; 5
	
	if ((key1 == 0b00001000) & (key2 == 0b00000001)){PORTB = 0b11111110; }
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	28 30       	cpi	r18, 0x08	; 8
 1cc:	31 05       	cpc	r19, r1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <keypd+0x142>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1dc:	21 30       	cpi	r18, 0x01	; 1
 1de:	31 05       	cpc	r19, r1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <keypd+0x154>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	89 23       	and	r24, r25
 1e6:	11 f0       	breq	.+4      	; 0x1ec <keypd+0x15c>
 1e8:	8e ef       	ldi	r24, 0xFE	; 254
 1ea:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00010000) & (key2 == 0b00000001)){PORTB = 0b11111111; }
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	20 31       	cpi	r18, 0x10	; 16
 1f8:	31 05       	cpc	r19, r1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <keypd+0x16e>
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 204:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 208:	21 30       	cpi	r18, 0x01	; 1
 20a:	31 05       	cpc	r19, r1
 20c:	09 f0       	breq	.+2      	; 0x210 <keypd+0x180>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	89 23       	and	r24, r25
 212:	11 f0       	breq	.+4      	; 0x218 <keypd+0x188>
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00100000) & (key2 == 0b00000001)){PORTB = 0b11111111; PORTD = 0b10000000; }
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 222:	20 32       	cpi	r18, 0x20	; 32
 224:	31 05       	cpc	r19, r1
 226:	09 f0       	breq	.+2      	; 0x22a <keypd+0x19a>
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 230:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 234:	21 30       	cpi	r18, 0x01	; 1
 236:	31 05       	cpc	r19, r1
 238:	09 f0       	breq	.+2      	; 0x23c <keypd+0x1ac>
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	89 23       	and	r24, r25
 23e:	21 f0       	breq	.+8      	; 0x248 <keypd+0x1b8>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	85 b9       	out	0x05, r24	; 5
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	89 e6       	ldi	r24, 0x69	; 105
 24c:	98 e1       	ldi	r25, 0x18	; 24
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <keypd+0x1be>
 256:	00 c0       	rjmp	.+0      	; 0x258 <keypd+0x1c8>
 258:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0x0;
 25a:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
 25c:	1b b8       	out	0x0b, r1	; 11
 25e:	08 95       	ret

00000260 <main>:

int main(void)
{
	while (1)
	{
		keypd();
 260:	0e 94 48 00 	call	0x90	; 0x90 <keypd>
 264:	fd cf       	rjmp	.-6      	; 0x260 <main>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
