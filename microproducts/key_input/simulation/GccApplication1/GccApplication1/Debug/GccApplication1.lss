
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000301  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  88:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <keypd>:
	return 0;
}

void keypd()
{
	DDRC = 0b00000111;    /* pc0,pc1,pc2 set as output */	
  90:	27 e0       	ldi	r18, 0x07	; 7
  92:	27 b9       	out	0x07, r18	; 7
	PORTC = 0b00111000;   /* pc0-pc2 outputs turn on (HIGH)*/
  94:	38 e3       	ldi	r19, 0x38	; 56
  96:	38 b9       	out	0x08, r19	; 8
	key2 = PINC & 0b00000111 ;
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 70       	andi	r24, 0x07	; 7
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <key2+0x1>
  a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <key2>
	
	DDRC = 0b00111000;    /* pc3,pc4,pc5 set as output */
  a6:	37 b9       	out	0x07, r19	; 7
	PORTC = 0b00000111;   /* pc0-pc2 outputs turn on (HIGH)*/
  a8:	28 b9       	out	0x08, r18	; 8
	key1 = PINC & 0b00111000 ;
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	88 73       	andi	r24, 0x38	; 56
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if ((key1 == 0b00001000) & (key2 == 0b00000100)){PORTB = 0b10000000; }
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <key2>
  be:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <key2+0x1>
  c2:	44 30       	cpi	r20, 0x04	; 4
  c4:	51 05       	cpc	r21, r1
  c6:	09 f0       	breq	.+2      	; 0xca <keypd+0x3a>
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	08 97       	sbiw	r24, 0x08	; 8
  ce:	09 f0       	breq	.+2      	; 0xd2 <keypd+0x42>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	23 23       	and	r18, r19
  d4:	11 f0       	breq	.+4      	; 0xda <keypd+0x4a>
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00010000) & (key2 == 0b00000100)){PORTB = 0b11000000; }
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	20 31       	cpi	r18, 0x10	; 16
  e6:	31 05       	cpc	r19, r1
  e8:	09 f0       	breq	.+2      	; 0xec <keypd+0x5c>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
  f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
  f6:	24 30       	cpi	r18, 0x04	; 4
  f8:	31 05       	cpc	r19, r1
  fa:	09 f0       	breq	.+2      	; 0xfe <keypd+0x6e>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	89 23       	and	r24, r25
 100:	11 f0       	breq	.+4      	; 0x106 <keypd+0x76>
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00100000) & (key2 == 0b00000100)){PORTB = 0b11100000; }
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	20 32       	cpi	r18, 0x20	; 32
 112:	31 05       	cpc	r19, r1
 114:	09 f0       	breq	.+2      	; 0x118 <keypd+0x88>
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 11e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 122:	24 30       	cpi	r18, 0x04	; 4
 124:	31 05       	cpc	r19, r1
 126:	09 f0       	breq	.+2      	; 0x12a <keypd+0x9a>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	89 23       	and	r24, r25
 12c:	11 f0       	breq	.+4      	; 0x132 <keypd+0xa2>
 12e:	80 ee       	ldi	r24, 0xE0	; 224
 130:	85 b9       	out	0x05, r24	; 5
	
	if ((key1 == 0b00001000) & (key2 == 0b00000010)){PORTB = 0b11110000; }
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	28 30       	cpi	r18, 0x08	; 8
 13e:	31 05       	cpc	r19, r1
 140:	09 f0       	breq	.+2      	; 0x144 <keypd+0xb4>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 14a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 14e:	22 30       	cpi	r18, 0x02	; 2
 150:	31 05       	cpc	r19, r1
 152:	09 f0       	breq	.+2      	; 0x156 <keypd+0xc6>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	89 23       	and	r24, r25
 158:	11 f0       	breq	.+4      	; 0x15e <keypd+0xce>
 15a:	80 ef       	ldi	r24, 0xF0	; 240
 15c:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00010000) & (key2 == 0b00000010)){PORTB = 0b11111000; }
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	20 31       	cpi	r18, 0x10	; 16
 16a:	31 05       	cpc	r19, r1
 16c:	09 f0       	breq	.+2      	; 0x170 <keypd+0xe0>
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 176:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 17a:	22 30       	cpi	r18, 0x02	; 2
 17c:	31 05       	cpc	r19, r1
 17e:	09 f0       	breq	.+2      	; 0x182 <keypd+0xf2>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	89 23       	and	r24, r25
 184:	11 f0       	breq	.+4      	; 0x18a <keypd+0xfa>
 186:	88 ef       	ldi	r24, 0xF8	; 248
 188:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00100000) & (key2 == 0b00000010)){PORTB = 0b11111100; }
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	20 32       	cpi	r18, 0x20	; 32
 196:	31 05       	cpc	r19, r1
 198:	09 f0       	breq	.+2      	; 0x19c <keypd+0x10c>
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1a2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	09 f0       	breq	.+2      	; 0x1ae <keypd+0x11e>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	89 23       	and	r24, r25
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <keypd+0x126>
 1b2:	8c ef       	ldi	r24, 0xFC	; 252
 1b4:	85 b9       	out	0x05, r24	; 5
	
	if ((key1 == 0b00001000) & (key2 == 0b00000001)){PORTB = 0b11111110; }
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c0:	28 30       	cpi	r18, 0x08	; 8
 1c2:	31 05       	cpc	r19, r1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <keypd+0x138>
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1ce:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1d2:	21 30       	cpi	r18, 0x01	; 1
 1d4:	31 05       	cpc	r19, r1
 1d6:	09 f0       	breq	.+2      	; 0x1da <keypd+0x14a>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	89 23       	and	r24, r25
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <keypd+0x152>
 1de:	8e ef       	ldi	r24, 0xFE	; 254
 1e0:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00010000) & (key2 == 0b00000001)){PORTB = 0b11111111; }
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	20 31       	cpi	r18, 0x10	; 16
 1ee:	31 05       	cpc	r19, r1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <keypd+0x164>
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1fe:	21 30       	cpi	r18, 0x01	; 1
 200:	31 05       	cpc	r19, r1
 202:	09 f0       	breq	.+2      	; 0x206 <keypd+0x176>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	89 23       	and	r24, r25
 208:	11 f0       	breq	.+4      	; 0x20e <keypd+0x17e>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	85 b9       	out	0x05, r24	; 5
	if ((key1 == 0b00100000) & (key2 == 0b00000001)){PORTB = 0b11111111; PORTD = 0b10000000; }
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 218:	20 32       	cpi	r18, 0x20	; 32
 21a:	31 05       	cpc	r19, r1
 21c:	09 f0       	breq	.+2      	; 0x220 <keypd+0x190>
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 226:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 22a:	21 30       	cpi	r18, 0x01	; 1
 22c:	31 05       	cpc	r19, r1
 22e:	09 f0       	breq	.+2      	; 0x232 <keypd+0x1a2>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	89 23       	and	r24, r25
 234:	21 f0       	breq	.+8      	; 0x23e <keypd+0x1ae>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	85 b9       	out	0x05, r24	; 5
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	80 e7       	ldi	r24, 0x70	; 112
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <keypd+0x1b4>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <keypd+0x1be>
 24e:	00 00       	nop
	_delay_ms(100);
	PORTB = 0x0;
 250:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
 252:	1b b8       	out	0x0b, r1	; 11
 254:	08 95       	ret

00000256 <main>:
#include <util/delay.h>
int  key1, key2;
void keypd();

int main(void)
{	DDRB = 0b11111111; /* for light pins set to output */
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b10000000;
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	8a b9       	out	0x0a, r24	; 10
	
	while (1)
	{
		keypd();
 25e:	0e 94 48 00 	call	0x90	; 0x90 <keypd>
 262:	fd cf       	rjmp	.-6      	; 0x25e <main+0x8>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
