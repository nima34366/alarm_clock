
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000795  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cd  00000000  00000000  00000b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000309  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5d 00 	call	0xba	; 0xba <main>
  88:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <keypd>:

int key1, key2;
int keypd();

int keypd(int *key1, int *key2)
{
  90:	fc 01       	movw	r30, r24
	DDRC = 0b00000111;    /* pc0,pc1,pc2 set as output */
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	97 b9       	out	0x07, r25	; 7
	PORTC = 0b00111000;   /* pc0-pc2 outputs turn on (HIGH)*/
  96:	48 e3       	ldi	r20, 0x38	; 56
  98:	48 b9       	out	0x08, r20	; 8
	*key2 = PINC & 0b00000111 ;
  9a:	26 b1       	in	r18, 0x06	; 6
  9c:	27 70       	andi	r18, 0x07	; 7
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	db 01       	movw	r26, r22
  a2:	2d 93       	st	X+, r18
  a4:	3c 93       	st	X, r19
	
	DDRC = 0b00111000;    /* pc3,pc4,pc5 set as output */
  a6:	47 b9       	out	0x07, r20	; 7
	PORTC = 0b00000111;   /* pc0-pc2 outputs turn on (HIGH)*/
  a8:	98 b9       	out	0x08, r25	; 8
	*key1 = PINC & 0b00111000 ;
  aa:	26 b1       	in	r18, 0x06	; 6
  ac:	28 73       	andi	r18, 0x38	; 56
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	31 83       	std	Z+1, r19	; 0x01
  b2:	20 83       	st	Z, r18
	return 0;
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <main>:

int main(void)
{	DDRB = 0b11111111; /* for light pins set to output */
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b10000000;
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	8a b9       	out	0x0a, r24	; 10
	
	while (1)
	{
		keypd(&key1, &key2);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	71 e0       	ldi	r23, 0x01	; 1
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 48 00 	call	0x90	; 0x90 <keypd>
		
		if ((key1 == 0b00001000) & (key2 == 0b00000100)){PORTB = 0b10000000; }
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	28 30       	cpi	r18, 0x08	; 8
  da:	31 05       	cpc	r19, r1
  dc:	09 f0       	breq	.+2      	; 0xe0 <main+0x26>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
  e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
  ea:	24 30       	cpi	r18, 0x04	; 4
  ec:	31 05       	cpc	r19, r1
  ee:	09 f0       	breq	.+2      	; 0xf2 <main+0x38>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	89 23       	and	r24, r25
  f4:	11 f0       	breq	.+4      	; 0xfa <main+0x40>
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00010000) & (key2 == 0b00000100)){PORTB = 0b11000000; }
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	20 31       	cpi	r18, 0x10	; 16
 106:	31 05       	cpc	r19, r1
 108:	09 f0       	breq	.+2      	; 0x10c <main+0x52>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 112:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 116:	24 30       	cpi	r18, 0x04	; 4
 118:	31 05       	cpc	r19, r1
 11a:	09 f0       	breq	.+2      	; 0x11e <main+0x64>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	89 23       	and	r24, r25
 120:	11 f0       	breq	.+4      	; 0x126 <main+0x6c>
 122:	80 ec       	ldi	r24, 0xC0	; 192
 124:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00100000) & (key2 == 0b00000100)){PORTB = 0b11100000; }
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 130:	20 32       	cpi	r18, 0x20	; 32
 132:	31 05       	cpc	r19, r1
 134:	09 f0       	breq	.+2      	; 0x138 <main+0x7e>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 13e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 142:	24 30       	cpi	r18, 0x04	; 4
 144:	31 05       	cpc	r19, r1
 146:	09 f0       	breq	.+2      	; 0x14a <main+0x90>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	89 23       	and	r24, r25
 14c:	11 f0       	breq	.+4      	; 0x152 <main+0x98>
 14e:	80 ee       	ldi	r24, 0xE0	; 224
 150:	85 b9       	out	0x05, r24	; 5
		
		if ((key1 == 0b00001000) & (key2 == 0b00000010)){PORTB = 0b11110000; }
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	28 30       	cpi	r18, 0x08	; 8
 15e:	31 05       	cpc	r19, r1
 160:	09 f0       	breq	.+2      	; 0x164 <main+0xaa>
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 16a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 16e:	22 30       	cpi	r18, 0x02	; 2
 170:	31 05       	cpc	r19, r1
 172:	09 f0       	breq	.+2      	; 0x176 <main+0xbc>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	89 23       	and	r24, r25
 178:	11 f0       	breq	.+4      	; 0x17e <main+0xc4>
 17a:	80 ef       	ldi	r24, 0xF0	; 240
 17c:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00010000) & (key2 == 0b00000010)){PORTB = 0b11111000; }
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	20 31       	cpi	r18, 0x10	; 16
 18a:	31 05       	cpc	r19, r1
 18c:	09 f0       	breq	.+2      	; 0x190 <main+0xd6>
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 196:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <main+0xe8>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	89 23       	and	r24, r25
 1a4:	11 f0       	breq	.+4      	; 0x1aa <main+0xf0>
 1a6:	88 ef       	ldi	r24, 0xF8	; 248
 1a8:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00100000) & (key2 == 0b00000010)){PORTB = 0b11111100; }
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	20 32       	cpi	r18, 0x20	; 32
 1b6:	31 05       	cpc	r19, r1
 1b8:	09 f0       	breq	.+2      	; 0x1bc <main+0x102>
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1c6:	22 30       	cpi	r18, 0x02	; 2
 1c8:	31 05       	cpc	r19, r1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <main+0x114>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	89 23       	and	r24, r25
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <main+0x11c>
 1d2:	8c ef       	ldi	r24, 0xFC	; 252
 1d4:	85 b9       	out	0x05, r24	; 5
		
		if ((key1 == 0b00001000) & (key2 == 0b00000001)){PORTB = 0b11111110; }
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	28 30       	cpi	r18, 0x08	; 8
 1e2:	31 05       	cpc	r19, r1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x12e>
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 1ee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 1f2:	21 30       	cpi	r18, 0x01	; 1
 1f4:	31 05       	cpc	r19, r1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <main+0x140>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	89 23       	and	r24, r25
 1fc:	11 f0       	breq	.+4      	; 0x202 <main+0x148>
 1fe:	8e ef       	ldi	r24, 0xFE	; 254
 200:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00010000) & (key2 == 0b00000001)){PORTB = 0b11111111; }
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20c:	20 31       	cpi	r18, 0x10	; 16
 20e:	31 05       	cpc	r19, r1
 210:	09 f0       	breq	.+2      	; 0x214 <main+0x15a>
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 21a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 21e:	21 30       	cpi	r18, 0x01	; 1
 220:	31 05       	cpc	r19, r1
 222:	09 f0       	breq	.+2      	; 0x226 <main+0x16c>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	89 23       	and	r24, r25
 228:	11 f0       	breq	.+4      	; 0x22e <main+0x174>
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00100000) & (key2 == 0b00000001)){PORTB = 0b11111111; PORTD = 0b10000000; }
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	20 32       	cpi	r18, 0x20	; 32
 23a:	31 05       	cpc	r19, r1
 23c:	09 f0       	breq	.+2      	; 0x240 <main+0x186>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <key2>
 246:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <key2+0x1>
 24a:	21 30       	cpi	r18, 0x01	; 1
 24c:	31 05       	cpc	r19, r1
 24e:	09 f0       	breq	.+2      	; 0x252 <main+0x198>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	89 23       	and	r24, r25
 254:	21 f0       	breq	.+8      	; 0x25e <main+0x1a4>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	85 b9       	out	0x05, r24	; 5
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	81 ee       	ldi	r24, 0xE1	; 225
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x1aa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x1b4>
 26e:	00 00       	nop
		_delay_ms(100);
		PORTB = 0x0;
 270:	15 b8       	out	0x05, r1	; 5
		PORTD = 0;
 272:	1b b8       	out	0x0b, r1	; 11
	}
 274:	26 cf       	rjmp	.-436    	; 0xc2 <main+0x8>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
