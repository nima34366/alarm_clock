
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080b  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000716  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <keypd>:
#include <avr/io.h>
#include <util/delay.h>
#include "keypad.h"
 
int keypd(int *key1, int *key2)
{
  80:	fc 01       	movw	r30, r24
	DDRC = 0b00000111;    /* pc0,pc1,pc2 set as output */
  82:	97 e0       	ldi	r25, 0x07	; 7
  84:	97 b9       	out	0x07, r25	; 7
	PORTC = 0b00111000;   /* pc0-pc2 outputs turn on (HIGH)*/
  86:	48 e3       	ldi	r20, 0x38	; 56
  88:	48 b9       	out	0x08, r20	; 8
	*key2 = PINC & 0b00000111 ;
  8a:	26 b1       	in	r18, 0x06	; 6
  8c:	27 70       	andi	r18, 0x07	; 7
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	db 01       	movw	r26, r22
  92:	2d 93       	st	X+, r18
  94:	3c 93       	st	X, r19
	
	DDRC = 0b00111000;    /* pc3,pc4,pc5 set as output */
  96:	47 b9       	out	0x07, r20	; 7
	PORTC = 0b00000111;   /* pc0-pc2 outputs turn on (HIGH)*/
  98:	98 b9       	out	0x08, r25	; 8
	*key1 = PINC & 0b00111000 ;
  9a:	26 b1       	in	r18, 0x06	; 6
  9c:	28 73       	andi	r18, 0x38	; 56
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	31 83       	std	Z+1, r19	; 0x01
  a2:	20 83       	st	Z, r18
	return 0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <main>:
#include <util/delay.h>
#include "keypad.h"


int main(void)
{	DDRB = 0b11111111; /* for light pins set to output */
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0x6>
  b0:	00 d0       	rcall	.+0      	; 0xb2 <main+0x8>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b10000000;
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	8a b9       	out	0x0a, r24	; 10
	
	while (1)
	{	int key1, key2;
		
		keypd(&key1, &key2);
  be:	be 01       	movw	r22, r28
  c0:	6f 5f       	subi	r22, 0xFF	; 255
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	ce 01       	movw	r24, r28
  c6:	03 96       	adiw	r24, 0x03	; 3
  c8:	0e 94 40 00 	call	0x80	; 0x80 <keypd>
		
		if ((key1 == 0b00001000) & (key2 == 0b00000100)){PORTB = 0b10000000; }
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	2b 81       	ldd	r18, Y+3	; 0x03
  d0:	3c 81       	ldd	r19, Y+4	; 0x04
  d2:	28 30       	cpi	r18, 0x08	; 8
  d4:	31 05       	cpc	r19, r1
  d6:	09 f0       	breq	.+2      	; 0xda <main+0x30>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	29 81       	ldd	r18, Y+1	; 0x01
  de:	3a 81       	ldd	r19, Y+2	; 0x02
  e0:	24 30       	cpi	r18, 0x04	; 4
  e2:	31 05       	cpc	r19, r1
  e4:	09 f0       	breq	.+2      	; 0xe8 <main+0x3e>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	89 23       	and	r24, r25
  ea:	11 f0       	breq	.+4      	; 0xf0 <main+0x46>
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00010000) & (key2 == 0b00000100)){PORTB = 0b11000000; }
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	2b 81       	ldd	r18, Y+3	; 0x03
  f4:	3c 81       	ldd	r19, Y+4	; 0x04
  f6:	20 31       	cpi	r18, 0x10	; 16
  f8:	31 05       	cpc	r19, r1
  fa:	09 f0       	breq	.+2      	; 0xfe <main+0x54>
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	3a 81       	ldd	r19, Y+2	; 0x02
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	31 05       	cpc	r19, r1
 108:	09 f0       	breq	.+2      	; 0x10c <main+0x62>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	89 23       	and	r24, r25
 10e:	11 f0       	breq	.+4      	; 0x114 <main+0x6a>
 110:	80 ec       	ldi	r24, 0xC0	; 192
 112:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00100000) & (key2 == 0b00000100)){PORTB = 0b11100000; }
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	2b 81       	ldd	r18, Y+3	; 0x03
 118:	3c 81       	ldd	r19, Y+4	; 0x04
 11a:	20 32       	cpi	r18, 0x20	; 32
 11c:	31 05       	cpc	r19, r1
 11e:	09 f0       	breq	.+2      	; 0x122 <main+0x78>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	29 81       	ldd	r18, Y+1	; 0x01
 126:	3a 81       	ldd	r19, Y+2	; 0x02
 128:	24 30       	cpi	r18, 0x04	; 4
 12a:	31 05       	cpc	r19, r1
 12c:	09 f0       	breq	.+2      	; 0x130 <main+0x86>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	89 23       	and	r24, r25
 132:	11 f0       	breq	.+4      	; 0x138 <main+0x8e>
 134:	80 ee       	ldi	r24, 0xE0	; 224
 136:	85 b9       	out	0x05, r24	; 5
		
		if ((key1 == 0b00001000) & (key2 == 0b00000010)){PORTB = 0b11110000; }
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	2b 81       	ldd	r18, Y+3	; 0x03
 13c:	3c 81       	ldd	r19, Y+4	; 0x04
 13e:	28 30       	cpi	r18, 0x08	; 8
 140:	31 05       	cpc	r19, r1
 142:	09 f0       	breq	.+2      	; 0x146 <main+0x9c>
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	3a 81       	ldd	r19, Y+2	; 0x02
 14c:	22 30       	cpi	r18, 0x02	; 2
 14e:	31 05       	cpc	r19, r1
 150:	09 f0       	breq	.+2      	; 0x154 <main+0xaa>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	89 23       	and	r24, r25
 156:	11 f0       	breq	.+4      	; 0x15c <main+0xb2>
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00010000) & (key2 == 0b00000010)){PORTB = 0b11111000; }
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	2b 81       	ldd	r18, Y+3	; 0x03
 160:	3c 81       	ldd	r19, Y+4	; 0x04
 162:	20 31       	cpi	r18, 0x10	; 16
 164:	31 05       	cpc	r19, r1
 166:	09 f0       	breq	.+2      	; 0x16a <main+0xc0>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	29 81       	ldd	r18, Y+1	; 0x01
 16e:	3a 81       	ldd	r19, Y+2	; 0x02
 170:	22 30       	cpi	r18, 0x02	; 2
 172:	31 05       	cpc	r19, r1
 174:	09 f0       	breq	.+2      	; 0x178 <main+0xce>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	89 23       	and	r24, r25
 17a:	11 f0       	breq	.+4      	; 0x180 <main+0xd6>
 17c:	88 ef       	ldi	r24, 0xF8	; 248
 17e:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00100000) & (key2 == 0b00000010)){PORTB = 0b11111100; }
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	2b 81       	ldd	r18, Y+3	; 0x03
 184:	3c 81       	ldd	r19, Y+4	; 0x04
 186:	20 32       	cpi	r18, 0x20	; 32
 188:	31 05       	cpc	r19, r1
 18a:	09 f0       	breq	.+2      	; 0x18e <main+0xe4>
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	3a 81       	ldd	r19, Y+2	; 0x02
 194:	22 30       	cpi	r18, 0x02	; 2
 196:	31 05       	cpc	r19, r1
 198:	09 f0       	breq	.+2      	; 0x19c <main+0xf2>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	89 23       	and	r24, r25
 19e:	11 f0       	breq	.+4      	; 0x1a4 <main+0xfa>
 1a0:	8c ef       	ldi	r24, 0xFC	; 252
 1a2:	85 b9       	out	0x05, r24	; 5
		
		if ((key1 == 0b00001000) & (key2 == 0b00000001)){PORTB = 0b11111110; }
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	2b 81       	ldd	r18, Y+3	; 0x03
 1a8:	3c 81       	ldd	r19, Y+4	; 0x04
 1aa:	28 30       	cpi	r18, 0x08	; 8
 1ac:	31 05       	cpc	r19, r1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <main+0x108>
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	29 81       	ldd	r18, Y+1	; 0x01
 1b6:	3a 81       	ldd	r19, Y+2	; 0x02
 1b8:	21 30       	cpi	r18, 0x01	; 1
 1ba:	31 05       	cpc	r19, r1
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <main+0x116>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	89 23       	and	r24, r25
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <main+0x11e>
 1c4:	8e ef       	ldi	r24, 0xFE	; 254
 1c6:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00010000) & (key2 == 0b00000001)){PORTB = 0b11111111; }
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	2b 81       	ldd	r18, Y+3	; 0x03
 1cc:	3c 81       	ldd	r19, Y+4	; 0x04
 1ce:	20 31       	cpi	r18, 0x10	; 16
 1d0:	31 05       	cpc	r19, r1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <main+0x12c>
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	29 81       	ldd	r18, Y+1	; 0x01
 1da:	3a 81       	ldd	r19, Y+2	; 0x02
 1dc:	21 30       	cpi	r18, 0x01	; 1
 1de:	31 05       	cpc	r19, r1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0x13a>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	89 23       	and	r24, r25
 1e6:	11 f0       	breq	.+4      	; 0x1ec <main+0x142>
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	85 b9       	out	0x05, r24	; 5
		if ((key1 == 0b00100000) & (key2 == 0b00000001)){PORTB = 0b11111111; PORTD = 0b10000000; }
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	2b 81       	ldd	r18, Y+3	; 0x03
 1f0:	3c 81       	ldd	r19, Y+4	; 0x04
 1f2:	20 32       	cpi	r18, 0x20	; 32
 1f4:	31 05       	cpc	r19, r1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <main+0x150>
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	29 81       	ldd	r18, Y+1	; 0x01
 1fe:	3a 81       	ldd	r19, Y+2	; 0x02
 200:	21 30       	cpi	r18, 0x01	; 1
 202:	31 05       	cpc	r19, r1
 204:	09 f0       	breq	.+2      	; 0x208 <main+0x15e>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	89 23       	and	r24, r25
 20a:	21 f0       	breq	.+8      	; 0x214 <main+0x16a>
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	85 b9       	out	0x05, r24	; 5
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	87 ea       	ldi	r24, 0xA7	; 167
 216:	91 e6       	ldi	r25, 0x61	; 97
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x16e>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x174>
 21e:	00 00       	nop
		_delay_ms(100);
		PORTB = 0x0;
 220:	15 b8       	out	0x05, r1	; 5
		PORTD = 0;
 222:	1b b8       	out	0x0b, r1	; 11
	}
 224:	4c cf       	rjmp	.-360    	; 0xbe <main+0x14>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
