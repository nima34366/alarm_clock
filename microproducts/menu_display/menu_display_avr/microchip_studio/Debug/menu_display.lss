
menu_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000278  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d54  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000600  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ab  00000000  00000000  00002675  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 18 01 	call	0x230	; 0x230 <main>
  8e:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	00 c0       	rjmp	.+0      	; 0x9e <toggle_e+0x8>
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	8b b9       	out	0x0b, r24	; 11
  a4:	08 95       	ret

000000a6 <lcd_write>:
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	d8 2f       	mov	r29, r24
  ac:	66 23       	and	r22, r22
  ae:	21 f0       	breq	.+8      	; 0xb8 <lcd_write+0x12>
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	03 c0       	rjmp	.+6      	; 0xbe <lcd_write+0x18>
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 7e       	andi	r24, 0xEF	; 239
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	cb b1       	in	r28, 0x0b	; 11
  cc:	c0 7f       	andi	r28, 0xF0	; 240
  ce:	8d 2f       	mov	r24, r29
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	8c 2b       	or	r24, r28
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  dc:	df 70       	andi	r29, 0x0F	; 15
  de:	dc 2b       	or	r29, r28
  e0:	db b9       	out	0x0b, r29	; 11
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  e6:	cf 60       	ori	r28, 0x0F	; 15
  e8:	cb b9       	out	0x0b, r28	; 11
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <lcd_read>:
  f0:	88 23       	and	r24, r24
  f2:	21 f0       	breq	.+8      	; 0xfc <lcd_read+0xc>
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_read+0x12>
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	80 62       	ori	r24, 0x20	; 32
 106:	8b b9       	out	0x0b, r24	; 11
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	8a b9       	out	0x0a, r24	; 10
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8b b9       	out	0x0b, r24	; 11
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_read+0x26>
 116:	99 b1       	in	r25, 0x09	; 9
 118:	92 95       	swap	r25
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 7b       	andi	r24, 0xBF	; 191
 120:	8b b9       	out	0x0b, r24	; 11
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_read+0x34>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_read+0x3c>
 12c:	89 b1       	in	r24, 0x09	; 9
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	2b b1       	in	r18, 0x0b	; 11
 132:	2f 7b       	andi	r18, 0xBF	; 191
 134:	2b b9       	out	0x0b, r18	; 11
 136:	89 2b       	or	r24, r25
 138:	08 95       	ret

0000013a <lcd_waitbusy>:
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
 140:	88 23       	and	r24, r24
 142:	dc f3       	brlt	.-10     	; 0x13a <lcd_waitbusy>
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_waitbusy+0xe>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
 152:	08 95       	ret

00000154 <lcd_command>:
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
 158:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_clrscr>:
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 16e:	08 95       	ret

00000170 <lcd_putc>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
 178:	ca 30       	cpi	r28, 0x0A	; 10
 17a:	49 f4       	brne	.+18     	; 0x18e <lcd_putc+0x1e>
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	10 f4       	brcc	.+4      	; 0x184 <lcd_putc+0x14>
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_putc+0x16>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	80 58       	subi	r24, 0x80	; 128
 188:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lcd_putc+0x26>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_puts>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	fc 01       	movw	r30, r24
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_puts+0xe>
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 1a6:	fe 01       	movw	r30, r28
 1a8:	ef 01       	movw	r28, r30
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	81 11       	cpse	r24, r1
 1b0:	f8 cf       	rjmp	.-16     	; 0x1a2 <lcd_puts+0x8>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1c0:	8a b1       	in	r24, 0x0a	; 10
 1c2:	8f 67       	ori	r24, 0x7F	; 127
 1c4:	8a b9       	out	0x0a, r24	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	9a ef       	ldi	r25, 0xFA	; 250
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 1da:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	9e e4       	ldi	r25, 0x4E	; 78
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e6:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d1 e0       	ldi	r29, 0x01	; 1
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f4:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 204:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 218:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 222:	81 2f       	mov	r24, r17
 224:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>

}/* lcd_init */
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <main>:
#include "lcd.h"
#include <util/delay.h>

int main(void)
{
	lcd_init(LCD_DISP_ON); /*initialize lcd,display on, cursor on */
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_init>
    while (1) 
    {
		PORTB=0b0111;
 236:	87 e0       	ldi	r24, 0x07	; 7
 238:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	83 ed       	ldi	r24, 0xD3	; 211
 23c:	90 e3       	ldi	r25, 0x30	; 48
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0xe>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x14>
 244:	00 00       	nop
		_delay_ms(50);
		if((PINB==0b0110)||(PINB==(0b0101))||(PINB==(0b0011)))
 246:	83 b1       	in	r24, 0x03	; 3
 248:	86 30       	cpi	r24, 0x06	; 6
 24a:	31 f0       	breq	.+12     	; 0x258 <main+0x28>
 24c:	83 b1       	in	r24, 0x03	; 3
 24e:	85 30       	cpi	r24, 0x05	; 5
 250:	19 f0       	breq	.+6      	; 0x258 <main+0x28>
 252:	83 b1       	in	r24, 0x03	; 3
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	39 f4       	brne	.+14     	; 0x266 <main+0x36>
		{
			lcd_clrscr();
 258:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
			lcd_puts("ON");
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 264:	e8 cf       	rjmp	.-48     	; 0x236 <main+0x6>
		}
		else
		{
			lcd_clrscr();
 266:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
			lcd_puts("OFF");
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 272:	e1 cf       	rjmp	.-62     	; 0x236 <main+0x6>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
