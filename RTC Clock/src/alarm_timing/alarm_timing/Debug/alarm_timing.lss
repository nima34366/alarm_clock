
alarm_timing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000714  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001969  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bca  00000000  00000000  000021cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  00002d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000035e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000793  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a77  00000000  00000000  00003f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000049e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	41 03       	mulsu	r20, r17

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 30       	cpi	r26, 0x09	; 9
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 48 03 	call	0x690	; 0x690 <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
  a0:	0c 94 4e 03 	jmp	0x69c	; 0x69c <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN4TimeC1Ev>:
	TWCR = _BV(TWEN) | _BV(TWINT);												// Send NACK and clear TWINT to proceed
	while ((TWCR & _BV(TWINT)) == 0) {};										// Wait for TWI to be ready

	TWCR = _BV(TWEN)| _BV(TWINT) | _BV(TWSTO);									// Send STOP
	return readValue;
}
  a8:	fc 01       	movw	r30, r24
  aa:	85 ee       	ldi	r24, 0xE5	; 229
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	96 83       	std	Z+6, r25	; 0x06
  b0:	85 83       	std	Z+5, r24	; 0x05
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	84 83       	std	Z+4, r24	; 0x04
  b6:	8c e1       	ldi	r24, 0x1C	; 28
  b8:	83 83       	std	Z+3, r24	; 0x03
  ba:	10 82       	st	Z, r1
  bc:	11 82       	std	Z+1, r1	; 0x01
  be:	12 82       	std	Z+2, r1	; 0x02
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	87 83       	std	Z+7, r24	; 0x07
  c4:	08 95       	ret

000000c6 <_ZN6DS3231C1Ehh>:
  c6:	fc 01       	movw	r30, r24
  c8:	61 83       	std	Z+1, r22	; 0x01
  ca:	40 83       	st	Z, r20
  cc:	08 95       	ret

000000ce <_ZN6DS32315beginEv>:
  ce:	88 b1       	in	r24, 0x08	; 8
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	88 b9       	out	0x08, r24	; 8
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	80 83       	st	Z, r24
  e4:	80 81       	ld	r24, Z
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	80 83       	st	Z, r24
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f6:	08 95       	ret

000000f8 <_ZN6DS323110_burstReadEv>:
  f8:	ac 01       	movw	r20, r24
  fa:	84 ee       	ldi	r24, 0xE4	; 228
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 100:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 104:	99 23       	and	r25, r25
 106:	e4 f7       	brge	.-8      	; 0x100 <_ZN6DS323110_burstReadEv+0x8>
 108:	80 ed       	ldi	r24, 0xD0	; 208
 10a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 10e:	84 ec       	ldi	r24, 0xC4	; 196
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 114:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 118:	99 23       	and	r25, r25
 11a:	e4 f7       	brge	.-8      	; 0x114 <_ZN6DS323110_burstReadEv+0x1c>
 11c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 120:	84 ec       	ldi	r24, 0xC4	; 196
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 126:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12a:	99 23       	and	r25, r25
 12c:	e4 f7       	brge	.-8      	; 0x126 <_ZN6DS323110_burstReadEv+0x2e>
 12e:	84 ee       	ldi	r24, 0xE4	; 228
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 138:	99 23       	and	r25, r25
 13a:	e4 f7       	brge	.-8      	; 0x134 <_ZN6DS323110_burstReadEv+0x3c>
 13c:	81 ed       	ldi	r24, 0xD1	; 209
 13e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 142:	84 ec       	ldi	r24, 0xC4	; 196
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14c:	99 23       	and	r25, r25
 14e:	e4 f7       	brge	.-8      	; 0x148 <_ZN6DS323110_burstReadEv+0x50>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	27 30       	cpi	r18, 0x07	; 7
 156:	31 05       	cpc	r19, r1
 158:	84 f4       	brge	.+32     	; 0x17a <_ZN6DS323110_burstReadEv+0x82>
 15a:	94 ec       	ldi	r25, 0xC4	; 196
 15c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 160:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 164:	99 23       	and	r25, r25
 166:	e4 f7       	brge	.-8      	; 0x160 <_ZN6DS323110_burstReadEv+0x68>
 168:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 16c:	fa 01       	movw	r30, r20
 16e:	e2 0f       	add	r30, r18
 170:	f3 1f       	adc	r31, r19
 172:	92 83       	std	Z+2, r25	; 0x02
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	ed cf       	rjmp	.-38     	; 0x154 <_ZN6DS323110_burstReadEv+0x5c>
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <_ZN6DS323110_burstReadEv+0x88>
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18e:	08 95       	ret

00000190 <_ZN6DS323114_writeRegisterEhh>:

void DS3231::_writeRegister(uint8_t reg, uint8_t value)
{
	// Send start address
	TWCR = _BV(TWEN) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);						// Send START
 190:	84 ee       	ldi	r24, 0xE4	; 228
 192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & _BV(TWINT)) == 0) {};										// Wait for TWI to be ready
 196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19a:	88 23       	and	r24, r24
 19c:	e4 f7       	brge	.-8      	; 0x196 <_ZN6DS323114_writeRegisterEhh+0x6>
	TWDR = DS3231_ADDR_W;
 19e:	80 ed       	ldi	r24, 0xD0	; 208
 1a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA);									// Clear TWINT to proceed
 1a4:	84 ec       	ldi	r24, 0xC4	; 196
 1a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & _BV(TWINT)) == 0) {};										// Wait for TWI to be ready
 1aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ae:	88 23       	and	r24, r24
 1b0:	e4 f7       	brge	.-8      	; 0x1aa <_ZN6DS323114_writeRegisterEhh+0x1a>
	TWDR = reg;
 1b2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA);									// Clear TWINT to proceed
 1b6:	84 ec       	ldi	r24, 0xC4	; 196
 1b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & _BV(TWINT)) == 0) {};										// Wait for TWI to be ready
 1bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	88 23       	and	r24, r24
 1c2:	e4 f7       	brge	.-8      	; 0x1bc <_ZN6DS323114_writeRegisterEhh+0x2c>
	TWDR = value;
 1c4:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA);									// Clear TWINT to proceed
 1c8:	84 ec       	ldi	r24, 0xC4	; 196
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & _BV(TWINT)) == 0) {};										// Wait for TWI to be ready
 1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d2:	88 23       	and	r24, r24
 1d4:	e4 f7       	brge	.-8      	; 0x1ce <_ZN6DS323114_writeRegisterEhh+0x3e>

	TWCR = _BV(TWEN)| _BV(TWINT) | _BV(TWSTO);									// Send STOP
 1d6:	84 e9       	ldi	r24, 0x94	; 148
 1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1dc:	08 95       	ret

000001de <_ZN6DS32317_decodeEh>:
	}
}

uint8_t	DS3231::_decode(uint8_t value)
{
	uint8_t decoded = value & 127;
 1de:	96 2f       	mov	r25, r22
 1e0:	9f 77       	andi	r25, 0x7F	; 127
	decoded = (decoded & 15) + 10 * ((decoded & (15 << 4)) >> 4);
 1e2:	92 95       	swap	r25
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	99 0f       	add	r25, r25
 1e8:	89 2f       	mov	r24, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	88 0f       	add	r24, r24
 1ee:	89 0f       	add	r24, r25
 1f0:	6f 70       	andi	r22, 0x0F	; 15
	return decoded;
}
 1f2:	86 0f       	add	r24, r22
 1f4:	08 95       	ret

000001f6 <_ZN6DS32318_decodeHEh>:

uint8_t DS3231::_decodeH(uint8_t value)
{
	if (value & 128)
 1f6:	66 23       	and	r22, r22
 1f8:	bc f4       	brge	.+46     	; 0x228 <_ZN6DS32318_decodeHEh+0x32>
	value = (value & 15) + (12 * ((value & 32) >> 5));
 1fa:	86 2f       	mov	r24, r22
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	60 72       	andi	r22, 0x20	; 32
 200:	26 2f       	mov	r18, r22
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	35 95       	asr	r19
 206:	27 95       	ror	r18
 208:	35 95       	asr	r19
 20a:	27 95       	ror	r18
 20c:	35 95       	asr	r19
 20e:	27 95       	ror	r18
 210:	35 95       	asr	r19
 212:	27 95       	ror	r18
 214:	35 95       	asr	r19
 216:	27 95       	ror	r18
 218:	62 2f       	mov	r22, r18
 21a:	66 0f       	add	r22, r22
 21c:	26 0f       	add	r18, r22
 21e:	62 2f       	mov	r22, r18
 220:	66 0f       	add	r22, r22
 222:	66 0f       	add	r22, r22
 224:	86 0f       	add	r24, r22
 226:	08 95       	ret
	else
	value = (value & 15) + (10 * ((value & 48) >> 4));
 228:	96 2f       	mov	r25, r22
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	60 73       	andi	r22, 0x30	; 48
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	75 95       	asr	r23
 232:	67 95       	ror	r22
 234:	75 95       	asr	r23
 236:	67 95       	ror	r22
 238:	75 95       	asr	r23
 23a:	67 95       	ror	r22
 23c:	75 95       	asr	r23
 23e:	67 95       	ror	r22
 240:	66 0f       	add	r22, r22
 242:	86 2f       	mov	r24, r22
 244:	88 0f       	add	r24, r24
 246:	88 0f       	add	r24, r24
 248:	68 0f       	add	r22, r24
 24a:	86 2f       	mov	r24, r22
 24c:	89 0f       	add	r24, r25
	return value;
}
 24e:	08 95       	ret

00000250 <_ZN6DS32318_decodeYEh>:

uint8_t	DS3231::_decodeY(uint8_t value)
{
	uint8_t decoded = (value & 15) + 10 * ((value & (15 << 4)) >> 4);
 250:	86 2f       	mov	r24, r22
 252:	82 95       	swap	r24
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	88 0f       	add	r24, r24
 258:	98 2f       	mov	r25, r24
 25a:	99 0f       	add	r25, r25
 25c:	99 0f       	add	r25, r25
 25e:	89 0f       	add	r24, r25
 260:	6f 70       	andi	r22, 0x0F	; 15
	return decoded;
}
 262:	86 0f       	add	r24, r22
 264:	08 95       	ret

00000266 <_ZN6DS32317getTimeEv>:

	TWCR = _BV(TWEN)| _BV(TWINT) | _BV(TWSTO);									// Send STOP
}

Time DS3231::getTime()
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	60 97       	sbiw	r28, 0x10	; 16
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	8c 01       	movw	r16, r24
	Time t;
 280:	ce 01       	movw	r24, r28
 282:	09 96       	adiw	r24, 0x09	; 9
 284:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN4TimeC1Ev>
	_burstRead();
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN6DS323110_burstReadEv>
	t.sec	= _decode(_burstArray[0]);
 28e:	f8 01       	movw	r30, r16
 290:	62 81       	ldd	r22, Z+2	; 0x02
 292:	c8 01       	movw	r24, r16
 294:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN6DS32317_decodeEh>
 298:	8b 87       	std	Y+11, r24	; 0x0b
	t.min	= _decode(_burstArray[1]);
 29a:	f8 01       	movw	r30, r16
 29c:	63 81       	ldd	r22, Z+3	; 0x03
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN6DS32317_decodeEh>
 2a4:	8a 87       	std	Y+10, r24	; 0x0a
	t.hour	= _decodeH(_burstArray[2]);
 2a6:	f8 01       	movw	r30, r16
 2a8:	64 81       	ldd	r22, Z+4	; 0x04
 2aa:	c8 01       	movw	r24, r16
 2ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN6DS32318_decodeHEh>
 2b0:	89 87       	std	Y+9, r24	; 0x09
	t.dow	= _burstArray[3];
 2b2:	f8 01       	movw	r30, r16
 2b4:	85 81       	ldd	r24, Z+5	; 0x05
 2b6:	88 8b       	std	Y+16, r24	; 0x10
	t.date	= _decode(_burstArray[4]);
 2b8:	66 81       	ldd	r22, Z+6	; 0x06
 2ba:	c8 01       	movw	r24, r16
 2bc:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN6DS32317_decodeEh>
 2c0:	8c 87       	std	Y+12, r24	; 0x0c
	t.mon	= _decode(_burstArray[5]);
 2c2:	f8 01       	movw	r30, r16
 2c4:	67 81       	ldd	r22, Z+7	; 0x07
 2c6:	c8 01       	movw	r24, r16
 2c8:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN6DS32317_decodeEh>
 2cc:	8d 87       	std	Y+13, r24	; 0x0d
	t.year	= _decodeY(_burstArray[6])+2000;
 2ce:	f8 01       	movw	r30, r16
 2d0:	60 85       	ldd	r22, Z+8	; 0x08
 2d2:	c8 01       	movw	r24, r16
 2d4:	0e 94 28 01 	call	0x250	; 0x250 <_ZN6DS32318_decodeYEh>
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	80 53       	subi	r24, 0x30	; 48
 2dc:	98 4f       	sbci	r25, 0xF8	; 248
 2de:	9f 87       	std	Y+15, r25	; 0x0f
 2e0:	8e 87       	std	Y+14, r24	; 0x0e
	return t;
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	fe 01       	movw	r30, r28
 2e6:	39 96       	adiw	r30, 0x09	; 9
 2e8:	de 01       	movw	r26, r28
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	01 90       	ld	r0, Z+
 2ee:	0d 92       	st	X+, r0
 2f0:	8a 95       	dec	r24
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <_ZN6DS32317getTimeEv+0x86>
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	3a 81       	ldd	r19, Y+2	; 0x02
 2f8:	4b 81       	ldd	r20, Y+3	; 0x03
 2fa:	5c 81       	ldd	r21, Y+4	; 0x04
 2fc:	6d 81       	ldd	r22, Y+5	; 0x05
 2fe:	7e 81       	ldd	r23, Y+6	; 0x06
}
 300:	8f 81       	ldd	r24, Y+7	; 0x07
 302:	98 85       	ldd	r25, Y+8	; 0x08
 304:	60 96       	adiw	r28, 0x10	; 16
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <_ZN6DS32317_encodeEh>:
	return decoded;
}

uint8_t DS3231::_encode(uint8_t value)
{
	uint8_t encoded = ((value / 10) << 4) + (value % 10);
 31a:	9d ec       	ldi	r25, 0xCD	; 205
 31c:	69 9f       	mul	r22, r25
 31e:	91 2d       	mov	r25, r1
 320:	11 24       	eor	r1, r1
 322:	96 95       	lsr	r25
 324:	96 95       	lsr	r25
 326:	96 95       	lsr	r25
 328:	29 2f       	mov	r18, r25
 32a:	22 0f       	add	r18, r18
 32c:	82 2f       	mov	r24, r18
 32e:	88 0f       	add	r24, r24
 330:	88 0f       	add	r24, r24
 332:	82 0f       	add	r24, r18
 334:	68 1b       	sub	r22, r24
 336:	86 2f       	mov	r24, r22
	return encoded;
}
 338:	20 e1       	ldi	r18, 0x10	; 16
 33a:	92 9f       	mul	r25, r18
 33c:	80 0d       	add	r24, r0
 33e:	11 24       	eor	r1, r1
 340:	08 95       	ret

00000342 <_ZN6DS32317setTimeEhhh>:
	t.year	= _decodeY(_burstArray[6])+2000;
	return t;
}

void DS3231::setTime(uint8_t hour, uint8_t min, uint8_t sec)
{
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
	if (((hour>=0) && (hour<24)) && ((min>=0) && (min<60)) && ((sec>=0) && (sec<60)))
 34a:	68 31       	cpi	r22, 0x18	; 24
 34c:	00 f5       	brcc	.+64     	; 0x38e <_ZN6DS32317setTimeEhhh+0x4c>
 34e:	4c 33       	cpi	r20, 0x3C	; 60
 350:	f0 f4       	brcc	.+60     	; 0x38e <_ZN6DS32317setTimeEhhh+0x4c>
 352:	2c 33       	cpi	r18, 0x3C	; 60
 354:	e0 f4       	brcc	.+56     	; 0x38e <_ZN6DS32317setTimeEhhh+0x4c>
 356:	02 2f       	mov	r16, r18
 358:	14 2f       	mov	r17, r20
 35a:	ec 01       	movw	r28, r24
	{
		_writeRegister(REG_HOUR, _encode(hour));
 35c:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN6DS32317_encodeEh>
 360:	48 2f       	mov	r20, r24
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	ce 01       	movw	r24, r28
 366:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN6DS323114_writeRegisterEhh>
		_writeRegister(REG_MIN, _encode(min));
 36a:	61 2f       	mov	r22, r17
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN6DS32317_encodeEh>
 372:	48 2f       	mov	r20, r24
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	ce 01       	movw	r24, r28
 378:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN6DS323114_writeRegisterEhh>
		_writeRegister(REG_SEC, _encode(sec));
 37c:	60 2f       	mov	r22, r16
 37e:	ce 01       	movw	r24, r28
 380:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN6DS32317_encodeEh>
 384:	48 2f       	mov	r20, r24
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	ce 01       	movw	r24, r28
 38a:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN6DS323114_writeRegisterEhh>
	}
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	08 95       	ret

00000398 <_ZN5AlarmC1Ev>:
	uint8_t encoded = ((value / 10) << 4) + (value % 10);
	return encoded;
}

// Class methods of Alarm
Alarm::Alarm()
 398:	fc 01       	movw	r30, r24
{
	this->hour = 0;
 39a:	11 82       	std	Z+1, r1	; 0x01
 39c:	10 82       	st	Z, r1
	this->minute  = 0;
 39e:	13 82       	std	Z+3, r1	; 0x03
 3a0:	12 82       	std	Z+2, r1	; 0x02
	this->active  = 0;
 3a2:	15 82       	std	Z+5, r1	; 0x05
 3a4:	14 82       	std	Z+4, r1	; 0x04
 3a6:	08 95       	ret

000003a8 <_ZN5Alarm3delEv>:
	_delay_ms(500);
}

void Alarm::del()
{
	this->active = 0;
 3a8:	fc 01       	movw	r30, r24
 3aa:	15 82       	std	Z+5, r1	; 0x05
 3ac:	14 82       	std	Z+4, r1	; 0x04
	PORTD &= ~(1<<AlarmActiveLED); // turning off active alarm indicative LED
 3ae:	8b b1       	in	r24, 0x0b	; 11
 3b0:	8e 7f       	andi	r24, 0xFE	; 254
 3b2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	ff e9       	ldi	r31, 0x9F	; 159
 3b6:	26 e8       	ldi	r18, 0x86	; 134
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	f1 50       	subi	r31, 0x01	; 1
 3bc:	20 40       	sbci	r18, 0x00	; 0
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <_ZN5Alarm3delEv+0x12>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <_ZN5Alarm3delEv+0x1c>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <_ZN5Alarm4ringEv>:
	_delay_ms(500);
}

void Alarm::ring()
{
 3c8:	fc 01       	movw	r30, r24
	PORTD |= (1<<AlarmRingLED); // turning on alarm ring indicative LED
 3ca:	9b b1       	in	r25, 0x0b	; 11
 3cc:	92 60       	ori	r25, 0x02	; 2
 3ce:	9b b9       	out	0x0b, r25	; 11
	
	// wait for the button press of snooze to stop the ringing
	while (1)
	{
		snooze_input = PINC & (1<<Snooze); // reading the state of snooze button
		if (snooze_input > 0)
 3d0:	32 9b       	sbis	0x06, 2	; 6
 3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <_ZN5Alarm4ringEv+0x1e>
		{
			PORTD &= ~(1<<AlarmRingLED); // turning off alarm ring indicative LED
 3d4:	9b b1       	in	r25, 0x0b	; 11
 3d6:	9d 7f       	andi	r25, 0xFD	; 253
 3d8:	9b b9       	out	0x0b, r25	; 11
			break;
		}
		_delay_ms(100);
	}
	
	this->active = 0;
 3da:	15 82       	std	Z+5, r1	; 0x05
 3dc:	14 82       	std	Z+4, r1	; 0x04
	PORTD &= ~(1<<AlarmActiveLED); // turning off active alarm indicative LED
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	8e 7f       	andi	r24, 0xFE	; 254
 3e2:	8b b9       	out	0x0b, r24	; 11
}
 3e4:	08 95       	ret
 3e6:	87 ea       	ldi	r24, 0xA7	; 167
 3e8:	91 e6       	ldi	r25, 0x61	; 97
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <_ZN5Alarm4ringEv+0x22>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <_ZN5Alarm4ringEv+0x28>
 3f0:	00 00       	nop
 3f2:	ee cf       	rjmp	.-36     	; 0x3d0 <_ZN5Alarm4ringEv+0x8>

000003f4 <_Z10read_digitv>:

// Common function definitions

int read_digit()
{
	int bit_input = PINB;
 3f4:	83 b1       	in	r24, 0x03	; 3
 3f6:	90 e0       	ldi	r25, 0x00	; 0
	int number = bit_input & (00111111); // remove bit 6 and 7
	return number;
}
 3f8:	89 74       	andi	r24, 0x49	; 73
 3fa:	92 79       	andi	r25, 0x92	; 146
 3fc:	08 95       	ret

000003fe <_ZN5Alarm3setEv>:
}

// Public functions

void Alarm::set()
{
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ec 01       	movw	r28, r24
	PORTD |= (1<<SetAlarmLED); // turning on set alarm LED
 408:	8b b1       	in	r24, 0x0b	; 11
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	8b b9       	out	0x0b, r24	; 11
 40e:	2f e9       	ldi	r18, 0x9F	; 159
 410:	86 e8       	ldi	r24, 0x86	; 134
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	
	int alarm_h;
	int alarm_m;
	int set_alarm_input;
	
	PORTD |= (1<<SetHourLED); // turning on set hour LED
 420:	8b b1       	in	r24, 0x0b	; 11
 422:	80 64       	ori	r24, 0x40	; 64
 424:	8b b9       	out	0x0b, r24	; 11
	
	// wait until user presses set alarm button to read the hours
	while (1)
	{
		set_alarm_input = PINC & (1<<SetAlarm);
		if (set_alarm_input > 0)
 426:	31 9b       	sbis	0x06, 1	; 6
 428:	13 c0       	rjmp	.+38     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			alarm_h = read_digit();
 42a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z10read_digitv>
 42e:	8c 01       	movw	r16, r24
			break;
		}
		_delay_ms(100);
	}
	
	PORTD &= ~(1<<SetHourLED); // turning off set hour LED
 430:	8b b1       	in	r24, 0x0b	; 11
 432:	8f 7b       	andi	r24, 0xBF	; 191
 434:	8b b9       	out	0x0b, r24	; 11
 436:	2f e9       	ldi	r18, 0x9F	; 159
 438:	86 e8       	ldi	r24, 0x86	; 134
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
	_delay_ms(500);
	
	PORTD |= (1<<SetMinuteLED); // turning on set minute LED
 448:	8b b1       	in	r24, 0x0b	; 11
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	8b b9       	out	0x0b, r24	; 11
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 450:	87 ea       	ldi	r24, 0xA7	; 167
 452:	91 e6       	ldi	r25, 0x61	; 97
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	e4 cf       	rjmp	.-56     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	
	// wait until user presses set alarm button to read the minutes
	while (1)
	{
		set_alarm_input = PINC & (1<<SetAlarm);
		if (set_alarm_input > 0)
 45e:	31 9b       	sbis	0x06, 1	; 6
 460:	1a c0       	rjmp	.+52     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		{
			alarm_m = read_digit();
 462:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z10read_digitv>
			break;
		}
		_delay_ms(100);
	}
	
	PORTD &= ~(1<<SetMinuteLED); // turning off set minute LED
 466:	2b b1       	in	r18, 0x0b	; 11
 468:	2e 7f       	andi	r18, 0xFE	; 254
 46a:	2b b9       	out	0x0b, r18	; 11
	
	// setting the alarm and activating
	this->hour = alarm_h;
 46c:	19 83       	std	Y+1, r17	; 0x01
 46e:	08 83       	st	Y, r16
	this->minute = alarm_m;
 470:	9b 83       	std	Y+3, r25	; 0x03
 472:	8a 83       	std	Y+2, r24	; 0x02
	this->active = 1;
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	9d 83       	std	Y+5, r25	; 0x05
 47a:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTD |= (1<<AlarmActiveLED); // turning on active alarm indicative LED
 47c:	8b b1       	in	r24, 0x0b	; 11
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	8b b9       	out	0x0b, r24	; 11
 482:	9f e9       	ldi	r25, 0x9F	; 159
 484:	26 e8       	ldi	r18, 0x86	; 134
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	91 50       	subi	r25, 0x01	; 1
 48a:	20 40       	sbci	r18, 0x00	; 0
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 492:	00 00       	nop
	_delay_ms(500);
}
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 496:	87 ea       	ldi	r24, 0xA7	; 167
 498:	91 e6       	ldi	r25, 0x61	; 97
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
 4a2:	dd cf       	rjmp	.-70     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <_Z17Alarm_timing_initv>:

void Alarm_timing_init()
{
	// setting pins as input/output
	
	DDRD = 0xff;	// PortD contains only the LEDs, setting them as outputs
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	// turning off the LEDs as initial conditions
 4b2:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0x00;	// PortB contains only the inputs of bit pattern
 4b4:	14 b8       	out	0x04, r1	; 4
	
	DDRC &= ~((1<<SetTime) | (1<<SetAlarm) | (1<<Snooze));
 4b6:	87 b1       	in	r24, 0x07	; 7
 4b8:	88 7f       	andi	r24, 0xF8	; 248
 4ba:	87 b9       	out	0x07, r24	; 7
 4bc:	08 95       	ret

000004be <_Z21Alarm_timing_set_time6DS3231>:
}

void Alarm_timing_set_time(DS3231 rtc)
{
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	29 97       	sbiw	r28, 0x09	; 9
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
 4d6:	09 83       	std	Y+1, r16	; 0x01
 4d8:	1a 83       	std	Y+2, r17	; 0x02
 4da:	2b 83       	std	Y+3, r18	; 0x03
 4dc:	3c 83       	std	Y+4, r19	; 0x04
 4de:	4d 83       	std	Y+5, r20	; 0x05
 4e0:	5e 83       	std	Y+6, r21	; 0x06
 4e2:	6f 83       	std	Y+7, r22	; 0x07
 4e4:	78 87       	std	Y+8, r23	; 0x08
 4e6:	89 87       	std	Y+9, r24	; 0x09
	PORTD |= (1<<SetTimeLED); // turning on set time LED
 4e8:	8b b1       	in	r24, 0x0b	; 11
 4ea:	88 60       	ori	r24, 0x08	; 8
 4ec:	8b b9       	out	0x0b, r24	; 11
 4ee:	2f e9       	ldi	r18, 0x9F	; 159
 4f0:	86 e8       	ldi	r24, 0x86	; 134
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	21 50       	subi	r18, 0x01	; 1
 4f6:	80 40       	sbci	r24, 0x00	; 0
 4f8:	90 40       	sbci	r25, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <_Z21Alarm_timing_set_time6DS3231+0x36>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <_Z21Alarm_timing_set_time6DS3231+0x40>
 4fe:	00 00       	nop
	
	int time_h;
	int time_m;
	int set_time_input;
	
	PORTD |= (1<<SetHourLED); // turning on set hour LED
 500:	8b b1       	in	r24, 0x0b	; 11
 502:	80 64       	ori	r24, 0x40	; 64
 504:	8b b9       	out	0x0b, r24	; 11
	
	// wait until user presses set time button to read the hours
	while (1)
	{
		set_time_input = PINC & (1<<SetTime);
		if (set_time_input > 0)
 506:	30 9b       	sbis	0x06, 0	; 6
 508:	13 c0       	rjmp	.+38     	; 0x530 <_Z21Alarm_timing_set_time6DS3231+0x72>
		{
			time_h = read_digit();
 50a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z10read_digitv>
 50e:	18 2f       	mov	r17, r24
			break;
		}
		_delay_ms(100);
	}
	
	PORTD &= ~(1<<SetHourLED); // turning off set hour LED
 510:	8b b1       	in	r24, 0x0b	; 11
 512:	8f 7b       	andi	r24, 0xBF	; 191
 514:	8b b9       	out	0x0b, r24	; 11
 516:	2f e9       	ldi	r18, 0x9F	; 159
 518:	86 e8       	ldi	r24, 0x86	; 134
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <_Z21Alarm_timing_set_time6DS3231+0x5e>
 524:	00 c0       	rjmp	.+0      	; 0x526 <_Z21Alarm_timing_set_time6DS3231+0x68>
 526:	00 00       	nop
	_delay_ms(500);
	
	PORTD |= (1<<SetMinuteLED); // turning on set minute LED
 528:	8b b1       	in	r24, 0x0b	; 11
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	8b b9       	out	0x0b, r24	; 11
 52e:	07 c0       	rjmp	.+14     	; 0x53e <_Z21Alarm_timing_set_time6DS3231+0x80>
 530:	87 ea       	ldi	r24, 0xA7	; 167
 532:	91 e6       	ldi	r25, 0x61	; 97
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <_Z21Alarm_timing_set_time6DS3231+0x76>
 538:	00 c0       	rjmp	.+0      	; 0x53a <_Z21Alarm_timing_set_time6DS3231+0x7c>
 53a:	00 00       	nop
 53c:	e4 cf       	rjmp	.-56     	; 0x506 <_Z21Alarm_timing_set_time6DS3231+0x48>
	
	// wait until user presses set time button to read the minutes
	while (1)
	{
		set_time_input = PINC & (1<<SetTime);
		if (set_time_input > 0)
 53e:	30 9b       	sbis	0x06, 0	; 6
 540:	16 c0       	rjmp	.+44     	; 0x56e <_Z21Alarm_timing_set_time6DS3231+0xb0>
		{
			time_m = read_digit();
 542:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z10read_digitv>
			break;
		}
		_delay_ms(100);
	}
	
	PORTD &= ~(1<<SetMinuteLED); // turning off set minute LED
 546:	9b b1       	in	r25, 0x0b	; 11
 548:	9e 7f       	andi	r25, 0xFE	; 254
 54a:	9b b9       	out	0x0b, r25	; 11
	
	//setting the time
	rtc.setTime(time_h,time_m,0);
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	48 2f       	mov	r20, r24
 550:	61 2f       	mov	r22, r17
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6DS32317setTimeEhhh>
 55a:	9f e9       	ldi	r25, 0x9F	; 159
 55c:	26 e8       	ldi	r18, 0x86	; 134
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	91 50       	subi	r25, 0x01	; 1
 562:	20 40       	sbci	r18, 0x00	; 0
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <_Z21Alarm_timing_set_time6DS3231+0xa2>
 568:	00 c0       	rjmp	.+0      	; 0x56a <_Z21Alarm_timing_set_time6DS3231+0xac>
 56a:	00 00       	nop
	
	_delay_ms(500);
 56c:	07 c0       	rjmp	.+14     	; 0x57c <_Z21Alarm_timing_set_time6DS3231+0xbe>
 56e:	87 ea       	ldi	r24, 0xA7	; 167
 570:	91 e6       	ldi	r25, 0x61	; 97
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <_Z21Alarm_timing_set_time6DS3231+0xb4>
 576:	00 c0       	rjmp	.+0      	; 0x578 <_Z21Alarm_timing_set_time6DS3231+0xba>
 578:	00 00       	nop
 57a:	e1 cf       	rjmp	.-62     	; 0x53e <_Z21Alarm_timing_set_time6DS3231+0x80>
 57c:	29 96       	adiw	r28, 0x09	; 9
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <_Z41__static_initialization_and_destruction_0ii>:
		
		_delay_ms(100);
		
    }
	return 0;
}
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	49 f4       	brne	.+18     	; 0x5a8 <_Z41__static_initialization_and_destruction_0ii+0x16>
 596:	6f 3f       	cpi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	31 f4       	brne	.+12     	; 0x5a8 <_Z41__static_initialization_and_destruction_0ii+0x16>
#include "Alarm_timing.h"		// Local Library

#define SDA PINC4
#define SCL PINC5

DS3231 RTC(SDA,SCL);
 59c:	45 e0       	ldi	r20, 0x05	; 5
 59e:	64 e0       	ldi	r22, 0x04	; 4
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 63 00 	call	0xc6	; 0xc6 <_ZN6DS3231C1Ehh>
 5a8:	08 95       	ret

000005aa <main>:

int main(void)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	2e 97       	sbiw	r28, 0x0e	; 14
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
	// initialing pins as inputs/outputs and setting initial values
	// function from library Alarm_timing
	int set_time_input = 0;
	int set_alarm_input = 0;

	Alarm alarm1;
 5be:	ce 01       	movw	r24, r28
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN5AlarmC1Ev>
	RTC.begin();
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 67 00 	call	0xce	; 0xce <_ZN6DS32315beginEv>
	
	Alarm_timing_init();
 5ce:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z17Alarm_timing_initv>
    
    while (1) 
    {
		// get the current time
		Time t = RTC.getTime();
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	0e 94 33 01 	call	0x266	; 0x266 <_ZN6DS32317getTimeEv>
 5da:	2f 83       	std	Y+7, r18	; 0x07
 5dc:	38 87       	std	Y+8, r19	; 0x08
 5de:	49 87       	std	Y+9, r20	; 0x09
 5e0:	5a 87       	std	Y+10, r21	; 0x0a
 5e2:	6b 87       	std	Y+11, r22	; 0x0b
 5e4:	7c 87       	std	Y+12, r23	; 0x0c
 5e6:	8d 87       	std	Y+13, r24	; 0x0d
 5e8:	9e 87       	std	Y+14, r25	; 0x0e
		int h = t.hour;
 5ea:	e2 2e       	mov	r14, r18
 5ec:	f1 2c       	mov	r15, r1
		int m = t.min;
 5ee:	c3 2e       	mov	r12, r19
 5f0:	d1 2c       	mov	r13, r1
		
		// check if any mode button is pressed, if so execute respective function
		
		// set time
		set_time_input = PINC & (1<<SetTime); // status of the set time button; 0 -> not pressed , otherwise -> pressed
		if (set_time_input > 0)	Alarm_timing_set_time(RTC);	// the button is pressed
 5f2:	30 9b       	sbis	0x06, 0	; 6
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <main+0x74>
 5f6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5fa:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 602:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 606:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 60a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 60e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 612:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 616:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 61a:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z21Alarm_timing_set_time6DS3231>
		
		
		// set new alarm
		set_alarm_input = PINC & (1<<SetAlarm); // state of the set alarm button; 0 -> not pressed , otherwise -> pressed
 61e:	06 b1       	in	r16, 0x06	; 6
 620:	02 70       	andi	r16, 0x02	; 2
 622:	10 e0       	ldi	r17, 0x00	; 0
		
		// if set alarm is pressed without a current active alarm --> set new alarm
		if (set_alarm_input > 0 && alarm1.active == 0)
 624:	10 16       	cp	r1, r16
 626:	11 06       	cpc	r1, r17
 628:	44 f4       	brge	.+16     	; 0x63a <main+0x90>
 62a:	8d 81       	ldd	r24, Y+5	; 0x05
 62c:	9e 81       	ldd	r25, Y+6	; 0x06
 62e:	89 2b       	or	r24, r25
 630:	21 f4       	brne	.+8      	; 0x63a <main+0x90>
		{
			alarm1.set();
 632:	ce 01       	movw	r24, r28
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN5Alarm3setEv>
		}
		
		// if set alarm is pressed with a current active alarm --> delete the current alarm
		if (set_alarm_input > 0 && alarm1.active == 1)
 63a:	10 16       	cp	r1, r16
 63c:	11 06       	cpc	r1, r17
 63e:	44 f4       	brge	.+16     	; 0x650 <main+0xa6>
 640:	8d 81       	ldd	r24, Y+5	; 0x05
 642:	9e 81       	ldd	r25, Y+6	; 0x06
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	21 f4       	brne	.+8      	; 0x650 <main+0xa6>
		{
			alarm1.del();
 648:	ce 01       	movw	r24, r28
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZN5Alarm3delEv>
		}
		
		
		// check for alarm time
		if (alarm1.hour == h && alarm1.minute == m && alarm1.active == 1)
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	9a 81       	ldd	r25, Y+2	; 0x02
 654:	e8 16       	cp	r14, r24
 656:	f9 06       	cpc	r15, r25
 658:	69 f4       	brne	.+26     	; 0x674 <main+0xca>
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	9c 81       	ldd	r25, Y+4	; 0x04
 65e:	c8 16       	cp	r12, r24
 660:	d9 06       	cpc	r13, r25
 662:	41 f4       	brne	.+16     	; 0x674 <main+0xca>
 664:	8d 81       	ldd	r24, Y+5	; 0x05
 666:	9e 81       	ldd	r25, Y+6	; 0x06
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	21 f4       	brne	.+8      	; 0x674 <main+0xca>
		{
			alarm1.ring();
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN5Alarm4ringEv>
 674:	87 ea       	ldi	r24, 0xA7	; 167
 676:	91 e6       	ldi	r25, 0x61	; 97
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <main+0xce>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0xd4>
 67e:	00 00       	nop
	Alarm alarm1;
	RTC.begin();
	
	Alarm_timing_init();
    
    while (1) 
 680:	a8 cf       	rjmp	.-176    	; 0x5d2 <main+0x28>

00000682 <_GLOBAL__sub_I_RTC>:
		
		_delay_ms(100);
		
    }
	return 0;
}
 682:	6f ef       	ldi	r22, 0xFF	; 255
 684:	7f ef       	ldi	r23, 0xFF	; 255
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 c9 02 	call	0x592	; 0x592 <_Z41__static_initialization_and_destruction_0ii>
 68e:	08 95       	ret

00000690 <__tablejump2__>:
 690:	ee 0f       	add	r30, r30
 692:	ff 1f       	adc	r31, r31
 694:	05 90       	lpm	r0, Z+
 696:	f4 91       	lpm	r31, Z
 698:	e0 2d       	mov	r30, r0
 69a:	09 94       	ijmp

0000069c <_exit>:
 69c:	f8 94       	cli

0000069e <__stop_program>:
 69e:	ff cf       	rjmp	.-2      	; 0x69e <__stop_program>
